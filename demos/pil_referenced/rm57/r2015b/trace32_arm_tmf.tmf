#
# File    : trace32_arm_tmf.tmf   
#
# Abstract:
#       Template makefile based on ert_lcc.tmf
#       (ert_lcc.tmf: Copyright 1994-2012 The MathWorks, Inc.)
#
#       This makefile attempts to conform to the guidelines specified in the
#       IEEE Std 1003.2-1992 (POSIX) standard. It is designed to be used
#       with GNU Make (gmake) which is located in matlabroot/bin/win32.
#
#       Note that this template is automatically customized by the build 
#       procedure to create "<model>.mk"
#
#       The following defines can be used to modify the behavior of the
#       build:
#         OPT_OPTS       - Optimization options. Default is none. To enable 
#                          debugging specify as OPT_OPTS=-g4. 
#         OPTS           - User specific compile options.
#         USER_SRCS      - Additional user sources, such as files needed by
#                          S-functions.
#         USER_INCLUDES  - Additional include paths 
#                          (i.e. USER_INCLUDES="-Iwhere-ever -Iwhere-ever2")
#                          (For Lcc, have a '/'as file seperator before the 
#                          file name instead of a '\' . 
#                          i.e.,  d:\work\proj1/myfile.c - reqd for 'gmake')
#       This template makefile is designed to be used with a system target
#       file that contains 'rtwgensettings.BuildDirSuffix' see ert.tlc
# --------------------------------------------------------------------------------
# $Id: trace32_arm_tmf.tmf 3045 2018-09-14 16:05:19Z csax $

#------------------------ Macros read by make_rtw ------------------------------
#
# The following macros are read by the build procedure:
#
#  MAKECMD         - This is the command used to invoke the make utility
#  HOST            - What platform this template makefile is targeted for
#                    (i.e. PC or UNIX)
#  BUILD           - Invoke make from the build procedure (yes/no)?
#  SYS_TARGET_FILE - Name of system target file.

MAKECMD             = "%MATLAB%\bin\|>ARCH<|\gmake"
SHELL               = cmd
HOST                = PC
BUILD               = yes
SYS_TARGET_FILE     = any
COMPILER_TOOL_CHAIN = default

MAKEFILE_FILESEP = /

#---------------------- Tokens expanded by make_rtw ----------------------------
#
# The following tokens, when wrapped with "|>" and "<|" are expanded by the
# build procedure.
#
#  MODEL_NAME          - Name of the Simulink block diagram
#  MODEL_MODULES       - Any additional generated source modules
#  MAKEFILE_NAME       - Name of makefile created from template makefile <model>.mk
#  MATLAB_ROOT         - Path to where MATLAB is installed.
#  MATLAB_BIN          - Path to MATLAB executable.
#  S_FUNCTIONS         - List of additional S-function modules.
#  S_FUNCTIONS_LIB     - List of S-functions libraries to link. 
#  NUMST               - Number of sample times
#  NCSTATES            - Number of continuous states
#  BUILDARGS           - Options passed in at the command line.
#  MULTITASKING        - yes (1) or no (0): Is solver mode multitasking
#  INTEGER_CODE        - yes (1) or no (0): Is generated code purely integer
#  MAT_FILE            - yes (1) or no (0): Should mat file logging be done,
#                        if 0, the generated code runs indefinitely
#  EXT_MODE            - yes (1) or no (0): Build for external mode
#  TMW_EXTMODE_TESTING - yes (1) or no (0): Build ext_test.c for external mode
#                        testing.
#  EXTMODE_TRANSPORT   - Index of transport mechanism (e.g. tcpip, serial) for extmode
#  EXTMODE_STATIC      - yes (1) or no (0): Use static instead of dynamic mem alloc.
#  EXTMODE_STATIC_SIZE - Size of static memory allocation buffer.
#  MULTI_INSTANCE_CODE - Is the generated code multi instantiable (1/0)?
#  PORTABLE_WORDSIZES  - Is this build intented for SIL simulation with portable word sizes (1/0)?
#  SHRLIBTARGET        - Is this build intended for generation of a shared library instead 
#                        of executable (1/0)?
#  MAKEFILEBUILDER_TGT - Is this build performed by the MakefileBuilder class
#                        e.g. to create a PIL executable?
#  STANDALONE_SUPPRESS_EXE - Build the standalone target but only create object code modules 
#                            and do not build an executable

MODEL                = |>MODEL_NAME<|
MODULES              = |>MODEL_MODULES<|
MAKEFILE             = |>MAKEFILE_NAME<|
MATLAB_ROOT          = |>MATLAB_ROOT<|
ALT_MATLAB_ROOT      = |>ALT_MATLAB_ROOT<|
MATLAB_BIN           = |>MATLAB_BIN<|
ALT_MATLAB_BIN       = |>ALT_MATLAB_BIN<|
MASTER_ANCHOR_DIR    = |>MASTER_ANCHOR_DIR<|
START_DIR            = |>START_DIR<|
S_FUNCTIONS          = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB      = |>S_FUNCTIONS_LIB<|
NUMST                = |>NUMST<|
NCSTATES             = |>NCSTATES<|
BUILDARGS            = |>BUILDARGS<|
MULTITASKING         = |>MULTITASKING<|
INTEGER_CODE         = |>INTEGER_CODE<|
MAT_FILE             = |>MAT_FILE<|
ONESTEPFCN           = |>COMBINE_OUTPUT_UPDATE_FCNS<|
TERMFCN              = |>INCLUDE_MDL_TERMINATE_FCN<|
B_ERTSFCN            = |>GENERATE_ERT_S_FUNCTION<|
MEXEXT               = |>MEXEXT<|
EXT_MODE             = |>EXT_MODE<|
TMW_EXTMODE_TESTING  = |>TMW_EXTMODE_TESTING<|
EXTMODE_TRANSPORT    = |>EXTMODE_TRANSPORT<|
EXTMODE_STATIC       = |>EXTMODE_STATIC_ALLOC<|
EXTMODE_STATIC_SIZE  = |>EXTMODE_STATIC_ALLOC_SIZE<|
MULTI_INSTANCE_CODE  = |>MULTI_INSTANCE_CODE<|
# CLASSIC_INTERFACE  = | > CLASSIC_INTERFACE < |
MODELREFS            = |>MODELREFS<|
SHARED_SRC           = |>SHARED_SRC<|
SHARED_SRC_DIR       = |>SHARED_SRC_DIR<|
SHARED_BIN_DIR       = |>SHARED_BIN_DIR<|
SHARED_LIB           = |>SHARED_LIB<|
GEN_SAMPLE_MAIN      = |>GEN_SAMPLE_MAIN<|
MEX_OPT_FILE         = |>MEX_OPT_FILE<|
PORTABLE_WORDSIZES   = |>PORTABLE_WORDSIZES<|
SHRLIBTARGET         = |>SHRLIBTARGET<|
MAKEFILEBUILDER_TGT  = |>MAKEFILEBUILDER_TGT<|
STANDALONE_SUPPRESS_EXE = |>STANDALONE_SUPPRESS_EXE<|
OPTIMIZATION_FLAGS      = |>OPTIMIZATION_FLAGS<|
ADDITIONAL_LDFLAGS      = |>ADDITIONAL_LDFLAGS<|

#-------------------------- Model and reference models -------------------------
MODELLIB                  = |>MODELLIB<|
MODELREF_LINK_LIBS        = |>MODELREF_LINK_LIBS<|
MODELREF_LINK_RSPFILE     = |>MODELREF_LINK_RSPFILE_NAME<|
MODELREF_INC_PATH         = |>START_MDLREFINC_EXPAND_INCLUDES<|-I|>MODELREF_INC_PATH<| |>END_MDLREFINC_EXPAND_INCLUDES<|
RELATIVE_PATH_TO_ANCHOR   = |>RELATIVE_PATH_TO_ANCHOR<|
# NONE: standalone, SIM: modelref sim, RTW: modelref coder target
MODELREF_TARGET_TYPE      = |>MODELREF_TARGET_TYPE<|
MODELREF_SFCN_SUFFIX      = |>MODELREF_SFCN_SUFFIX<|

#########################################################################################
#------------- Tokens need to be set by the user for his real target device ------------#
#########################################################################################
TRGT_CC := "C:\compiler\gcc_arm_embedded_4_9_2015q2\bin\arm-none-eabi-gcc.exe"
TRGT_LIN := $(TRGT_CC)
TRGT_AR := "C:\compiler\gcc_arm_embedded_4_9_2015q2\bin\arm-none-eabi-ar.exe"
TRGT_DEVFILE := "C:\T32\demo\env\matlabsimulink\t32xil\targets\cortex-r\crt0.s"
TRGT_LIN_SCRIPT := "C:\T32\demo\env\matlabsimulink\t32xil\targets\cortex-r\link.lds"

RM := rm
#########################################################################################

#------------------------ Handle path containing spaces ------------------------
ifneq ($(MATLAB_ROOT),$(ALT_MATLAB_ROOT))
MATLAB_ROOT := $(ALT_MATLAB_ROOT)
endif
ifneq ($(MATLAB_BIN),$(ALT_MATLAB_BIN))
MATLAB_BIN := $(ALT_MATLAB_BIN)
endif

#-------------------------------- External mode --------------------------------
# Uncomment -DVERBOSE to have information printed to stdout
# To add a new transport layer, see the comments in
#   <matlabroot>/toolbox/simulink/simulink/extmode_transports.m
ifeq ($(EXT_MODE),1)
  EXT_CC_OPTS = -DEXT_MODE -DWIN32 # -DVERBOSE
  ifeq ($(EXTMODE_TRANSPORT),0) #tcpip
    EXT_SRC = ext_svr.c updown.c ext_work.c rtiostream_interface.c rtiostream_tcpip.c
#   EXT_LIB = $(MATLAB_ROOT)\sys\lcc\lib\wsock32.lib
  endif
  ifeq ($(EXTMODE_TRANSPORT),1) #serial_win32
    EXT_SRC  = ext_svr.c updown.c ext_work.c ext_svr_serial_transport.c
    EXT_SRC += ext_serial_pkt.c rtiostream_serial_interface.c rtiostream_serial.c
  endif
  ifeq ($(TMW_EXTMODE_TESTING),1)
    EXT_SRC     += ext_test.c
    EXT_CC_OPTS += -DTMW_EXTMODE_TESTING
  endif
  ifeq ($(EXTMODE_STATIC),1)
    EXT_SRC     += mem_mgr.c
    EXT_CC_OPTS += -DEXTMODE_STATIC -DEXTMODE_STATIC_SIZE=$(EXTMODE_STATIC_SIZE)
  endif
endif

#--------------------------- Tool Specifications -------------------------------

# LCC = $(MATLAB_ROOT)\sys\lcc
# include $(MATLAB_ROOT)\rtw\c\tools\lcctools.mak

# Determine if we are generating an s-function
SFCN = 0
ifeq ($(MODELREF_TARGET_TYPE),SIM)
  SFCN = 1
endif
ifeq ($(B_ERTSFCN),1)
  SFCN = 1
endif

COMPILER_INCLUDES =

#------------------------------ Include Path -----------------------------------

# Additional includes 

ADD_INCLUDES = \
|>START_EXPAND_INCLUDES<|	-I|>EXPAND_DIR_NAME<| \
|>END_EXPAND_INCLUDES<|

# see MATLAB_INCLUDES and COMPILER_INCLUDES from lcctool.mak

MATLAB_INCLUDES = -I$(MATLAB_ROOT)/rtw/c/src -I$(MATLAB_ROOT)/simulink/include

SHARED_INCLUDES =
ifneq ($(SHARED_SRC_DIR),)
SHARED_INCLUDES = -I$(SHARED_SRC_DIR) 
endif

INCLUDES = -I. -I$(RELATIVE_PATH_TO_ANCHOR) $(MATLAB_INCLUDES) $(ADD_INCLUDES) \
           $(COMPILER_INCLUDES) $(USER_INCLUDES) $(MODELREF_INC_PATH) \
           $(SHARED_INCLUDES)

#-------------------------------- C Flags --------------------------------------

# Optimization Options
OPT_OPTS = $(DEFAULT_OPT_OPTS)

# General User Options
OPTS = -march=armv4t -marm -mlittle-endian -msoft-float

CSPLUS_OPTS = -g -Wall -fshort-enums -c

# Compiler options, etc:
ifneq ($(OPTIMIZATION_FLAGS),)
CC_OPTS = $(OPTS) $(CSPLUS_OPTS) $(ANSI_OPTS) $(EXT_CC_OPTS) $(OPTIMIZATION_FLAGS)
MEX_OPT_OPTS = OPTIMFLAGS="$(OPTIMIZATION_FLAGS)"
else
CC_OPTS = $(OPT_OPTS) $(OPTS) $(CSPLUS_OPTS) $(ANSI_OPTS) $(EXT_CC_OPTS)
MEX_OPT_OPTS = $(OPT_OPTS)
endif

CPP_REQ_DEFINES = -DMODEL=$(MODEL) -DNUMST=$(NUMST) -DNCSTATES=$(NCSTATES) \
                  -DMAT_FILE=$(MAT_FILE) -DINTEGER_CODE=$(INTEGER_CODE) \
                  -DONESTEPFCN=$(ONESTEPFCN) -DTERMFCN=$(TERMFCN) \
                  -DHAVESTDIO -DMULTI_INSTANCE_CODE=$(MULTI_INSTANCE_CODE) \
                  -DCLASSIC_INTERFACE=$(CLASSIC_INTERFACE)

ifeq ($(MODELREF_TARGET_TYPE),SIM)
CPP_REQ_DEFINES += -DMDL_REF_SIM_TGT=1
else
CPP_REQ_DEFINES += -DMULTITASKING=$(MULTITASKING)
endif

ifeq ($(PORTABLE_WORDSIZES),1)
CPP_REQ_DEFINES += -DPORTABLE_WORDSIZES
endif

CFLAGS = $(CC_OPTS) $(CPP_REQ_DEFINES) $(INCLUDES) 

# ifeq ($(OPT_OPTS),$(DEFAULT_OPT_OPTS))
LDFLAGS = -g -Wall $(OPTS) -Wl,--nmagic -nostartfiles -nodefaultlibs -T $(TRGT_LIN_SCRIPT) -L$(dir $(MODELLIB))
# else
# LDFLAGS = -L$(LIB)
# endif

ifneq ($(ADDITIONAL_LDFLAGS),)
MEX_LDFLAGS = LINKFLAGS="$$LINKFLAGS $(ADDITIONAL_LDFLAGS)"
else
MEX_LDFLAGS =
endif

#-------------------------- Additional Libraries ------------------------------

LIBS =
|>START_PRECOMP_LIBRARIES<|
# ifeq ($(OPT_OPTS),$(DEFAULT_OPT_OPTS))
# ifeq ($(INTEGER_CODE),0)
# ifeq ($(SFCN),1)
# LIBS += |>EXPAND_LIBRARY_LOCATION<|\|>EXPAND_LIBRARY_NAME<|_rtwsfcn_lcc.lib
# else
# LIBS += |>EXPAND_LIBRARY_LOCATION<|\|>EXPAND_LIBRARY_NAME<|_ert_lcc.lib
# endif
# else
# LIBS += |>EXPAND_LIBRARY_LOCATION<|\|>EXPAND_LIBRARY_NAME<|_int_ert_lcc.lib
# endif
# else
LIBS += |>EXPAND_LIBRARY_NAME<|.a
# endif
|>END_PRECOMP_LIBRARIES<|
|>START_EXPAND_LIBRARIES<|
LIBS += |>EXPAND_LIBRARY_NAME<|.a |>END_EXPAND_LIBRARIES<|
LIBS += $(EXT_LIB) $(S_FUNCTIONS_LIB)

# ifeq ($(MODELREF_TARGET_TYPE),SIM)
# LIBMWIPP = $(MATLAB_ROOT)\lib\win32\libippmwipt.lib
# LIBS += $(LIBMWIPP)
# endif

# ifeq ($(SFCN),1)
# LIBFIXPT = $(MATLAB_ROOT)\extern\lib\win32\lcc\libfixedpoint.lib
# LIBS += $(LIBFIXPT)
# endif

# ifeq ($(MODELREF_TARGET_TYPE),SIM)
# LIBMWMATHUTIL = $(MATLAB_ROOT)\extern\lib\win32\lcc\libmwmathutil.lib
# LIBS += $(LIBMWMATHUTIL)
# endif

# ifeq ($(MODELREF_TARGET_TYPE),SIM)
# LIBMWSL_FILEIO = $(MATLAB_ROOT)\extern\lib\win32\lcc\libmwsl_fileio.lib
# LIBS += $(LIBMWSL_FILEIO)
# endif

LINKERLIBS = -Wl,--start-group -lgcc -lc -lm -Wl,--end-group


#----------------------------- Source Files ------------------------------------
ADD_SRCS =

ifeq ($(SFCN),0)
  SRCS = $(ADD_SRCS) $(S_FUNCTIONS)
  SRC_DEP =
  ifeq ($(MODELREF_TARGET_TYPE), NONE)
    ifeq ($(SHRLIBTARGET),1)
#--- Shared library target (.dll) ---
#     PRODUCT            = $(RELATIVE_PATH_TO_ANCHOR)/$(MODEL)_win32.dll
#     BIN_SETTING        = $(TRGT_CC) $(LDFLAGS) $(ADDITIONAL_LDFLAGS) -dll -o $(PRODUCT) $(SYSLIBS) 
#     BUILD_PRODUCT_TYPE = dynamically linked library
#     SRCS               += $(MODULES) $(MODEL).c lcc_dll_main.c $(EXT_SRC) 
    else
      ifeq ($(MAKEFILEBUILDER_TGT),1)
        PRODUCT            = $(MODEL).elf
        BIN_SETTING        = $(TRGT_LIN) $(LDFLAGS) $(ADDITIONAL_LDFLAGS) -o $(PRODUCT) $(TRGT_DEVFILE) $(SYSLIBS) 
        BUILD_PRODUCT_TYPE = executable
        PREBUILT_OBJS       = $(MODULES:.c=.o)
      else
        ifeq ($(STANDALONE_SUPPRESS_EXE),1)
#--- Build library only for top level model
          PRODUCT            = ObjectModulesOnly
          BUILD_PRODUCT_TYPE = object modules
          SRCS               += $(MODULES) $(MODEL).c $(EXT_SRC)
        else
#--- Stand-alone model (.exe) ---
          PRODUCT            = $(RELATIVE_PATH_TO_ANCHOR)/$(MODEL).elf
          BIN_SETTING        = $(TRGT_CC) $(LDFLAGS) $(ADDITIONAL_LDFLAGS) -o $(PRODUCT) $(SYSLIBS) 
          SRCS               += $(MODULES) $(MODEL).c $(EXT_SRC)
          BUILD_PRODUCT_TYPE = executable
#         ifeq ($(GEN_SAMPLE_MAIN),0)
#           ifeq ($(MULTI_INSTANCE_CODE), 1)
#               SRCS            += $(MODULES) $(MODEL).c rt_malloc_main.c $(EXT_SRC)
#            else
#               SRCS            += $(MODULES) $(MODEL).c rt_main.c $(EXT_SRC)
#            endif
#         else
#            SRCS               += $(MODULES) $(MODEL).c ert_main.c $(EXT_SRC)
#         endif
        endif
      endif
    endif
  else
    # Model reference coder target
    SRCS               += $(MODULES) 
    PRODUCT            = $(MODELLIB)
    BUILD_PRODUCT_TYPE = library
  endif
else
#  ifeq ($(MODELREF_TARGET_TYPE), SIM)
#  PRODUCT            = $(RELATIVE_PATH_TO_ANCHOR)/$(MODEL)$(MODELREF_SFCN_SUFFIX).$(MEXEXT)
#  RTW_SFUN_SRC       = $(MODEL)$(MODELREF_SFCN_SUFFIX).c
#  SRCS               = $(MODULES) $(ADD_SRCS)
#  else
#  PRODUCT            = $(RELATIVE_PATH_TO_ANCHOR)/$(MODEL)_sf.$(MEXEXT)
#  RTW_SFUN_SRC       = $(MODEL)_sf.c
#  SRCS               = $(MODULES) $(ADD_SRCS) $(S_FUNCTIONS)
#  BIN_SETTING        = $(MATLAB_BIN)\mex.bat $(MEX_OPT_OPTS) -win32 $(MEX_LDFLAGS) $(RTW_SFUN_SRC) $(MEX_OPT_FILE) $(INCLUDES) -outdir $(RELATIVE_PATH_TO_ANCHOR) 
#  endif  
#  BUILD_PRODUCT_TYPE = mex file
#  ifeq ($(B_ERTSFCN),1)
#    SRCS              += $(MODEL).c    
#  endif
#  SRC_DEP            = $(RTW_SFUN_SRC)
endif

USER_SRCS =

USER_OBJS       = $(USER_SRCS:.c=.o)
LOCAL_USER_OBJS = $(notdir $(USER_OBJS))

OBJS      = $(SRCS:.c=.o) $(USER_OBJS)
LINK_OBJS = $(SRCS:.c=.o) $(LOCAL_USER_OBJS)

SHARED_SRC := $(wildcard $(SHARED_SRC))
SHARED_OBJS_NO_PATH = $(addsuffix .o, $(basename $(notdir $(SHARED_SRC))))
SHARED_OBJS = $(addprefix $(join $(SHARED_BIN_DIR), /), $(SHARED_OBJS_NO_PATH))
FMT_SHARED_OBJS = $(subst /,\,$(SHARED_OBJS))

#--------------------------------- Rules ---------------------------------------
ifeq ($(MODELREF_TARGET_TYPE),NONE)
  ifeq ($(SHRLIBTARGET),1)
#    $(PRODUCT) : $(OBJS) $(SHARED_LIB) $(LIBS) $(MODELREF_LINK_LIBS)
#	$(BIN_SETTING) $(LINK_OBJS) @$(MODELREF_LINK_RSPFILE) $(SHARED_LIB) $(LIBS) $(MODEL).def
# #--- Comment out the next line to retain .lib and .exp files ---
#	@$(RM) $(RELATIVE_PATH_TO_ANCHOR)\$(MODEL)_win32.lib $(RELATIVE_PATH_TO_ANCHOR)\$(MODEL)_win32.exp
#	@cmd /C "echo ### Created $(BUILD_PRODUCT_TYPE): $@  (legacy: *** Created $(BUILD_PRODUCT_TYPE):)"
  else
    ifeq ($(MAKEFILEBUILDER_TGT),1)
      $(PRODUCT) : $(PREBUILT_OBJS) $(OBJS) $(MODELLIB) $(SHARED_LIB) $(LIBS)  $(SRC_DEP) $(MODELREF_LINK_LIBS)
		$(BIN_SETTING) $(PREBUILT_OBJS) $(LINK_OBJS) -l$(notdir $(MODELLIB:.lib=)) $(SHARED_LIB) $(LIBS) $(LINKERLIBS)
		@cmd /C "echo ### Created $(BUILD_PRODUCT_TYPE): $@  (legacy: *** Created $(BUILD_PRODUCT_TYPE):)"
    else
      ifeq ($(STANDALONE_SUPPRESS_EXE), 1)
        .PHONY: $(PRODUCT)
        $(PRODUCT) : $(OBJS) $(SHARED_LIB) $(LIBS) $(SRC_DEP) $(MODELREF_LINK_LIBS)
		@cmd /C "echo ### Created $(BUILD_PRODUCT_TYPE): $@  (legacy: *** Created $(BUILD_PRODUCT_TYPE):)"
      else
        $(PRODUCT) : $(OBJS) $(SHARED_LIB) $(LIBS) $(SRC_DEP) $(MODELREF_LINK_LIBS)
			$(BIN_SETTING) $(LINK_OBJS) $(SHARED_LIB) $(LIBS) 
			@cmd /C "echo ### Created $(BUILD_PRODUCT_TYPE): $@  (legacy: *** Created $(BUILD_PRODUCT_TYPE):)"
      endif
    endif
  endif
else
 ifeq ($(MODELREF_TARGET_TYPE),SIM)
  $(PRODUCT) : $(OBJS) $(SHARED_LIB) $(LIBS) $(SRC_DEP)
	@if exist $(MODELLIB) $(RM) $(MODELLIB)
	$(TRGT_LIN) -o $(MODELLIB) $(LINK_OBJS)
	@cmd /C "echo ### Created $(MODELLIB)"
	$(MATLAB_BIN)\mex.bat -win32 $(MEX_LDFLAGS) -c $(RTW_SFUN_SRC) $(MEX_OPT_FILE) $(INCLUDES) 
	$(MATLAB_BIN)\mex.bat -win32 $(MEX_OPT_FILE) $(MEX_LDFLAGS) -outdir $(RELATIVE_PATH_TO_ANCHOR) $(MODEL)$(MODELREF_SFCN_SUFFIX).o $(MODELLIB) @$(MODELREF_LINK_RSPFILE) $(SHARED_LIB) $(LIBS) 
	@cmd /C "echo ### Created $(BUILD_PRODUCT_TYPE): $@  (legacy: *** Created $(BUILD_PRODUCT_TYPE):)"
 else
  $(PRODUCT) : $(OBJS) $(SHARED_LIB) $(SRC_DEP)
	@if exist $(MODELLIB) $(RM) $(MODELLIB)
	$(TRGT_AR) -r $(MODELLIB) $(LINK_OBJS)
	@copy  $(MODELLIB) lib$(MODELLIB:.lib=.a)
#	@copy  $(PRODUCT) $(PRODUCT:.lib=.o)
	@cmd /C "echo ### Created $(MODELLIB)"
	@cmd /C "echo ### Created $(BUILD_PRODUCT_TYPE): $@  (legacy: *** Created $(BUILD_PRODUCT_TYPE):)"
 endif
endif

%.o : %.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : %.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(RELATIVE_PATH_TO_ANCHOR)/%.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(RELATIVE_PATH_TO_ANCHOR)/%.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

# compile rt_main.c or rt_malloc_main.c from rtw/c/src/common if one was not generated
# ifeq ($(GEN_SAMPLE_MAIN),0)
# %.o : $(MATLAB_ROOT)/rtw/c/src/common/%.c
#	$(TRGT_CC) -o $(@F) $(CFLAGS) $<
# endif

# compile lcc_dll_main.c
# ifeq ($(SHRLIBTARGET),1)
# %.o : $(MATLAB_ROOT)/rtw/c/ert/%.c
#	$(TRGT_CC) -o $(@F) $(CFLAGS) $<
# endif

%.o : $(MATLAB_ROOT)/rtw/c/ert/%.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/%.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/%.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/common/%.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/rtiostream/rtiostreamtcpip/%.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/rtiostream/rtiostreamtcpip/%.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/serial/%.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/serial/%.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/custom/%.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/custom/%.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

|>END_EXPAND_RULES<|

|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

|>END_EXPAND_RULES<|

%.o : $(MATLAB_ROOT)/simulink/src/%.c
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

%.o : $(MATLAB_ROOT)/simulink/src/%.C
	$(TRGT_CC) -o $(@F) $(CFLAGS) $<

# Libraries:

|>START_EXPAND_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|    |>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.lib : $(MAKEFILE) rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@cmd /C "echo ### Creating $@"
	@if exist $@ $(RM) $@
	$(TRGT_LIN) -o $@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@cmd /C "echo ### $@ Created "

|>END_EXPAND_LIBRARIES<|

|>START_PRECOMP_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|    |>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.lib : $(MAKEFILE) rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@cmd /C "echo ### Creating $@"
	@if exist $@ $(RM) $@
	$(TRGT_LIN) -o $@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@cmd /C "echo ### $@ Created"

|>END_PRECOMP_LIBRARIES<|

#----------------------------- Dependencies ------------------------------------

$(OBJS) : $(MAKEFILE) rtw_proj.tmw

$(SHARED_OBJS) : $(SHARED_BIN_DIR)/%.o : $(SHARED_SRC_DIR)/%.c  
	$(TRGT_CC) -o $@ $(CFLAGS) $<

$(SHARED_LIB) : $(SHARED_OBJS)
	@cmd /C "echo ### Creating $@"
	@if exist $@ $(RM) $@
	$(TRGT_AR) -r $@ $(FMT_SHARED_OBJS)
	@cmd /C "echo ### $@ Created"

#--------- Miscellaneous rules to purge, clean and lint (sol2 only) ------------

purge : clean
	@cmd /C "echo ### Deleting the generated source code for $(MODEL)"
	@$(RM) $(MODEL).c $(MODEL).h $(MODEL)_types.h $(MODEL)_data.c $(MODEL).rtw \
	        $(MODEL)_private.h $(MODULES) rtw_proj.tmw $(MAKEFILE)

clean :
	@cmd /C "echo ### Deleting the objects and $(PROGRAM)"
	@$(RM) $(LINK_OBJS) ..\$(MODEL).elf

# EOF: trace32_arm_tmf.tmf
